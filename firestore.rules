rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for artifacts collection (main app data)
    match /artifacts/{appId}/users/{userId}/{document=**} {
      // Allow read/write only if the authenticated user matches the userId
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Specific rules for settings subcollection
    match /artifacts/{appId}/users/{userId}/settings/{settingId} {
      // Allow read/write for authenticated user's own settings
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate settings data structure
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && validateSettingsData(resource.data, request.resource.data);
    }
    
    // Rules for products subcollection
    match /artifacts/{appId}/users/{userId}/products/{productId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate product data
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && validateProductData(request.resource.data);
    }
    
    // Rules for customers subcollection
    match /artifacts/{appId}/users/{userId}/customers/{customerId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate customer data
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && validateCustomerData(request.resource.data);
    }
    
    // Rules for sales subcollection
    match /artifacts/{appId}/users/{userId}/sales/{saleId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // Validate sales data
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && validateSalesData(request.resource.data);
    }
    
    // Rules for batch operations (reset functionality)
    match /artifacts/{appId}/users/{userId}/products/{document=**} {
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /artifacts/{appId}/users/{userId}/customers/{document=**} {
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /artifacts/{appId}/users/{userId}/sales/{document=**} {
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /artifacts/{appId}/users/{userId}/settings/{document=**} {
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // User profile rules
    match /artifacts/{appId}/users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation of user document on first login
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // Validation functions
  function validateSettingsData(existingData, newData) {
    return newData.keys().hasAll(['storeName']) &&
           newData.storeName is string &&
           newData.storeName.size() > 0 &&
           newData.storeName.size() <= 100 &&
           (newData.storeAddress is string || !newData.keys().hasAny(['storeAddress'])) &&
           (newData.storePhone is string || !newData.keys().hasAny(['storePhone'])) &&
           (newData.storeEmail is string || !newData.keys().hasAny(['storeEmail'])) &&
           (newData.logoUrl is string || !newData.keys().hasAny(['logoUrl'])) &&
           (newData.currency is string || !newData.keys().hasAny(['currency'])) &&
           (newData.currency == 'IDR' || !newData.keys().hasAny(['currency'])) &&
           (newData.taxRate is number || !newData.keys().hasAny(['taxRate'])) &&
           (newData.taxRate >= 0 && newData.taxRate <= 100 || !newData.keys().hasAny(['taxRate'])) &&
           (newData.receiptFooter is string || !newData.keys().hasAny(['receiptFooter'])) &&
           (newData.theme is string || !newData.keys().hasAny(['theme'])) &&
           (newData.theme in ['light', 'dark', 'auto'] || !newData.keys().hasAny(['theme'])) &&
           (newData.autoBackup is bool || !newData.keys().hasAny(['autoBackup'])) &&
           (newData.lowStockAlert is number || !newData.keys().hasAny(['lowStockAlert'])) &&
           (newData.lowStockAlert >= 1 && newData.lowStockAlert <= 100 || !newData.keys().hasAny(['lowStockAlert'])) &&
           (newData.themeColor is string || !newData.keys().hasAny(['themeColor'])) &&
           (newData.themeColor.matches('^#[0-9A-Fa-f]{6}$') || !newData.keys().hasAny(['themeColor'])) &&
           (newData.printerSettings is map || !newData.keys().hasAny(['printerSettings'])) &&
           (!newData.keys().hasAny(['printerSettings']) || (
             newData.printerSettings.keys().hasAll(['paperSize', 'copies', 'autoPrint']) &&
             newData.printerSettings.paperSize is string &&
             newData.printerSettings.paperSize in ['58mm', '80mm', 'A4'] &&
             newData.printerSettings.copies is number &&
             newData.printerSettings.copies >= 1 && newData.printerSettings.copies <= 5 &&
             newData.printerSettings.autoPrint is bool
           ));
  }
  
  function validateProductData(data) {
    return data.keys().hasAll(['name', 'category', 'price', 'costPrice', 'stock']) &&
           data.name is string &&
           data.name.size() > 0 &&
           data.name.size() <= 200 &&
           data.category is string &&
           data.category.size() > 0 &&
           data.category.size() <= 100 &&
           data.price is number &&
           data.price >= 0 &&
           data.costPrice is number &&
           data.costPrice >= 0 &&
           data.stock is number &&
           data.stock >= 0 &&
           (data.brand is string || !data.keys().hasAny(['brand'])) &&
           (data.icon is string || !data.keys().hasAny(['icon'])) &&
           (data.iconColor is string || !data.keys().hasAny(['iconColor'])) &&
           (!data.keys().hasAny(['iconColor']) || data.iconColor.matches('^#[0-9A-Fa-f]{6}$'));
  }
  
  function validateCustomerData(data) {
    return data.keys().hasAll(['name']) &&
           data.name is string &&
           data.name.size() > 0 &&
           data.name.size() <= 200 &&
           (data.phone is string || !data.keys().hasAny(['phone'])) &&
           (data.email is string || !data.keys().hasAny(['email'])) &&
           (data.gender is string || !data.keys().hasAny(['gender'])) &&
           (data.address is string || !data.keys().hasAny(['address'])) &&
           (data.wallet is number || !data.keys().hasAny(['wallet'])) &&
           (!data.keys().hasAny(['wallet']) || data.wallet >= 0);
  }
  
  function validateSalesData(data) {
    return data.keys().hasAll(['date', 'items', 'subtotal', 'finalTotal', 'paymentMethod']) &&
           data.date is timestamp &&
           data.items is list &&
           data.items.size() > 0 &&
           data.subtotal is number &&
           data.subtotal >= 0 &&
           data.finalTotal is number &&
           data.finalTotal >= 0 &&
           data.paymentMethod is string &&
           data.paymentMethod.size() > 0 &&
           data.paymentMethod in ['Tunai', 'Transfer Bank', 'E-Wallet', 'Saldo'] &&
           (data.discount is map || !data.keys().hasAny(['discount'])) &&
           (data.tax is map || !data.keys().hasAny(['tax'])) &&
           (data.customer is map || !data.keys().hasAny(['customer'])) &&
           (data.notes is string || !data.keys().hasAny(['notes'])) &&
           (data.updatedAt is timestamp || !data.keys().hasAny(['updatedAt']));
  }
  
  function validateUserData(data) {
    return data.keys().hasAll(['email']) &&
           data.email is string &&
           data.email.size() > 0 &&
           (data.displayName is string || !data.keys().hasAny(['displayName'])) &&
           (data.createdAt is timestamp || !data.keys().hasAny(['createdAt'])) &&
           (data.subscriptionStatus is string || !data.keys().hasAny(['subscriptionStatus'])) &&
           (!data.keys().hasAny(['subscriptionStatus']) || data.subscriptionStatus in ['trial', 'active', 'expired']);
  }
}